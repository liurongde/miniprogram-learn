<!--pages/index/components/components.wxml-->
<!--
创建自定义组件
类似于页面，一个自定义组件由 json wxml wxss js 4个文件组成。要编写一个自定义组件，首先需要在 json 文件中进行自定义组件声明（将 components 字段设为 true 可这一组文件设为自定义组件）：
同时，还要在 wxml 文件中编写组件模版，在 wxss 文件中加入组件样式，它们的写法与页面的写法类似。
注意：在组件wxss中不应使用ID选择器、属性选择器和标签名选择器。
在自定义组件的 js 文件中，需要使用 Component() 来注册组件，并提供组件的属性定义、内部数据和自定义方法。

组件的属性值和内部数据将被用于组件 wxml 的渲染，其中，属性值是可由组件外部传入的。更多细节参见 Component构造器 。
https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/
-->
  <!-- 以下是对一个自定义组件的引用 -->
<!-- <view>
  <components-tag-name inner-text="Some text"></components-tag-name>
</view> -->
<!--
组件模版和样式
类似于页面，自定义组件拥有自己的 wxml 模版和 wxss 样式。
组件模版
组件模版的写法与页面模板相同。组件模版与组件数据结合后生成的节点树，将被插入到组件的引用位置上。

在组件模板中可以提供一个 <slot> 节点，用于承载组件引用时提供的子节点。  
注意，在模版中引用到的自定义组件及其对应的节点名需要在 json 文件中显式定义，否则会被当作一个无意义的节点。

组件wxml的slot
在组件的wxml中可以包含 slot 节点，用于承载组件使用者提供的wxml结构。

默认情况下，一个组件的wxml中只能有一个slot。需要使用多slot时，可以在组件js中声明启用。   

组件样式
组件对应 wxss 文件的样式，只对组件wxml内的节点生效。编写组件样式时，需要注意以下几点：

组件和引用组件的页面不能使用id选择器（#a）、属性选择器（[a]）和标签名选择器，请改用class选择器。
组件和引用组件的页面中使用后代选择器（.a .b）在一些极端情况下会有非预期的表现，如遇，请避免使用。
子元素选择器（.a>.b）只能用于 view 组件与其子节点之间，用于其他组件可能导致非预期的情况。
继承样式，如 font 、 color ，会从组件外继承到组件内。
除继承样式外， app.wxss 中的样式、组件所在页面的的样式对自定义组件无效。
除此以外，组件可以指定它所在节点的默认样式，使用 :host 选择器

外部样式类
有时，组件希望接受外部传入的样式类（类似于 view 组件的 hover-class 属性）。此时可以在 Component 中用 externalClasses 定义段定义若干个外部样式类。这个特性从小程序基础库版本 1.9.90 开始支持。

注意：在同一个节点上使用普通样式类和外部样式类时，两个类的优先级是未定义的，因此最好避免这种情况。
-->
    <!-- 这部分内容将被放置在组件 <slot> 的位置上 -->
 <!--<view>-->
  <!--<components-tag-name test="green-text">-->
    <!--<view>这里是插入到组件slot中的内容</view>-->
  <!--</components-tag-name>-->
<!--</view>-->

<!-- 引用组件的页面模版 -->
<!--<view>-->
  <!--<components-tag-name bind:myevent="onMyEvent"> -->
    <!--&lt;!&ndash; 这部分内容将被放置在组件 <slot name="before"> 的位置上 &ndash;&gt;-->
    <!--<view slot="before">这里是插入到组件slot name="before"中的内容</view>-->
    <!--&lt;!&ndash; 这部分内容将被放置在组件 <slot name="after"> 的位置上 &ndash;&gt;-->
    <!--<view slot="after">这里是插入到组件slot name="after"中的内容</view>-->
  <!--</components-tag-name>-->
<!--</view>-->
    <component-tag-name bindcustomevent="pageEventListener1">
      <custom-component bindcustomevent="pageEventListener2">
      </custom-component>
    </component-tag-name>
<!--<components-tag-name bindmyevent="onMyEvent" />-->
